/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.storage.adlsg2;

import com.microsoft.azure.storage.adlsg2.models.DataLakeStorageErrorException;
import com.microsoft.azure.storage.adlsg2.models.FilesystemCreateResponse;
import com.microsoft.azure.storage.adlsg2.models.FilesystemDeleteResponse;
import com.microsoft.azure.storage.adlsg2.models.FilesystemGetPropertiesResponse;
import com.microsoft.azure.storage.adlsg2.models.FilesystemList;
import com.microsoft.azure.storage.adlsg2.models.FilesystemListResponse;
import com.microsoft.azure.storage.adlsg2.models.FilesystemSetPropertiesResponse;
import com.microsoft.rest.v2.Context;
import com.microsoft.rest.v2.RestProxy;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.annotations.DELETE;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HEAD;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.HostParam;
import com.microsoft.rest.v2.annotations.PATCH;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.PUT;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * GeneratedFilesystems.
 */
public final class GeneratedFilesystems {
    /**
     * The proxy service used to perform REST calls.
     */
    private FilesystemsService service;

    /**
     * The service client containing this operation class.
     */
    private GeneratedDataLakeStorageClient client;

    /**
     * Initializes an instance of GeneratedFilesystems.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public GeneratedFilesystems(GeneratedDataLakeStorageClient client) {
        this.service = RestProxy.create(FilesystemsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for GeneratedFilesystems to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{scheme}://{accountName}.{dnsSuffix}")
    private interface FilesystemsService {
        @GET("")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DataLakeStorageErrorException.class)
        Single<FilesystemListResponse> list(Context context, @HostParam("scheme") String scheme, @HostParam("accountName") String accountName, @HostParam("dnsSuffix") String dnsSuffix, @QueryParam("resource") String resource, @QueryParam("prefix") String prefix, @QueryParam("continuation") String continuation, @QueryParam("maxResults") Integer maxResults, @HeaderParam("x-ms-client-request-id") String xMsClientRequestId, @QueryParam("timeout") Integer timeout, @HeaderParam("x-ms-date") String xMsDate, @HeaderParam("x-ms-version") String xMsVersion);

        @PUT("{filesystem}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(DataLakeStorageErrorException.class)
        Single<FilesystemCreateResponse> create(Context context, @HostParam("scheme") String scheme, @HostParam("accountName") String accountName, @HostParam("dnsSuffix") String dnsSuffix, @PathParam("filesystem") String filesystem, @HeaderParam("x-ms-properties") String xMsProperties, @QueryParam("resource") String resource, @HeaderParam("x-ms-client-request-id") String xMsClientRequestId, @QueryParam("timeout") Integer timeout, @HeaderParam("x-ms-date") String xMsDate, @HeaderParam("x-ms-version") String xMsVersion);

        @PATCH("{filesystem}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DataLakeStorageErrorException.class)
        Single<FilesystemSetPropertiesResponse> setProperties(Context context, @HostParam("scheme") String scheme, @HostParam("accountName") String accountName, @HostParam("dnsSuffix") String dnsSuffix, @PathParam("filesystem") String filesystem, @HeaderParam("x-ms-properties") String xMsProperties, @HeaderParam("If-Modified-Since") String ifModifiedSince, @HeaderParam("If-Unmodified-Since") String ifUnmodifiedSince, @QueryParam("resource") String resource, @HeaderParam("x-ms-client-request-id") String xMsClientRequestId, @QueryParam("timeout") Integer timeout, @HeaderParam("x-ms-date") String xMsDate, @HeaderParam("x-ms-version") String xMsVersion);

        @HEAD("{filesystem}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DataLakeStorageErrorException.class)
        Single<FilesystemGetPropertiesResponse> getProperties(Context context, @HostParam("scheme") String scheme, @HostParam("accountName") String accountName, @HostParam("dnsSuffix") String dnsSuffix, @PathParam("filesystem") String filesystem, @QueryParam("resource") String resource, @HeaderParam("x-ms-client-request-id") String xMsClientRequestId, @QueryParam("timeout") Integer timeout, @HeaderParam("x-ms-date") String xMsDate, @HeaderParam("x-ms-version") String xMsVersion);

        @DELETE("{filesystem}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(DataLakeStorageErrorException.class)
        Single<FilesystemDeleteResponse> delete(Context context, @HostParam("scheme") String scheme, @HostParam("accountName") String accountName, @HostParam("dnsSuffix") String dnsSuffix, @PathParam("filesystem") String filesystem, @HeaderParam("If-Modified-Since") String ifModifiedSince, @HeaderParam("If-Unmodified-Since") String ifUnmodifiedSince, @QueryParam("resource") String resource, @HeaderParam("x-ms-client-request-id") String xMsClientRequestId, @QueryParam("timeout") Integer timeout, @HeaderParam("x-ms-date") String xMsDate, @HeaderParam("x-ms-version") String xMsVersion);
    }

    /**
     * List Filesystems
     * List filesystems and their properties in given account.
     *
     * @param context The context to associate with this operation.
     * @param prefix Filters results to filesystems within the specified prefix.
     * @param continuation The number of filesystems returned with each invocation is limited. If the number of filesystems to be returned exceeds this limit, a continuation token is returned in the response header x-ms-continuation. When a continuation token is  returned in the response, it must be specified in a subsequent invocation of the list operation to continue listing the filesystems.
     * @param maxResults An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will include up to 5,000 items.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DataLakeStorageErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the FilesystemList object if successful.
     */
    public FilesystemList list(Context context, String prefix, String continuation, Integer maxResults, String xMsClientRequestId, Integer timeout, String xMsDate) {
        return listAsync(context, prefix, continuation, maxResults, xMsClientRequestId, timeout, xMsDate).blockingGet();
    }

    /**
     * List Filesystems
     * List filesystems and their properties in given account.
     *
     * @param context The context to associate with this operation.
     * @param prefix Filters results to filesystems within the specified prefix.
     * @param continuation The number of filesystems returned with each invocation is limited. If the number of filesystems to be returned exceeds this limit, a continuation token is returned in the response header x-ms-continuation. When a continuation token is  returned in the response, it must be specified in a subsequent invocation of the list operation to continue listing the filesystems.
     * @param maxResults An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will include up to 5,000 items.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<FilesystemList> listAsync(Context context, String prefix, String continuation, Integer maxResults, String xMsClientRequestId, Integer timeout, String xMsDate, ServiceCallback<FilesystemList> serviceCallback) {
        return ServiceFuture.fromBody(listAsync(context, prefix, continuation, maxResults, xMsClientRequestId, timeout, xMsDate), serviceCallback);
    }

    /**
     * List Filesystems
     * List filesystems and their properties in given account.
     *
     * @param context The context to associate with this operation.
     * @param prefix Filters results to filesystems within the specified prefix.
     * @param continuation The number of filesystems returned with each invocation is limited. If the number of filesystems to be returned exceeds this limit, a continuation token is returned in the response header x-ms-continuation. When a continuation token is  returned in the response, it must be specified in a subsequent invocation of the list operation to continue listing the filesystems.
     * @param maxResults An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will include up to 5,000 items.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<FilesystemListResponse> listWithRestResponseAsync(Context context, String prefix, String continuation, Integer maxResults, String xMsClientRequestId, Integer timeout, String xMsDate) {
        if (this.client.scheme() == null) {
            throw new IllegalArgumentException("Parameter this.client.scheme() is required and cannot be null.");
        }
        if (this.client.accountName() == null) {
            throw new IllegalArgumentException("Parameter this.client.accountName() is required and cannot be null.");
        }
        if (this.client.dnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter this.client.dnsSuffix() is required and cannot be null.");
        }
        final String resource = "account";
        return service.list(context, this.client.scheme(), this.client.accountName(), this.client.dnsSuffix(), resource, prefix, continuation, maxResults, xMsClientRequestId, timeout, xMsDate, this.client.xMsVersion());
    }

    /**
     * List Filesystems
     * List filesystems and their properties in given account.
     *
     * @param context The context to associate with this operation.
     * @param prefix Filters results to filesystems within the specified prefix.
     * @param continuation The number of filesystems returned with each invocation is limited. If the number of filesystems to be returned exceeds this limit, a continuation token is returned in the response header x-ms-continuation. When a continuation token is  returned in the response, it must be specified in a subsequent invocation of the list operation to continue listing the filesystems.
     * @param maxResults An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will include up to 5,000 items.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<FilesystemList> listAsync(Context context, String prefix, String continuation, Integer maxResults, String xMsClientRequestId, Integer timeout, String xMsDate) {
        return listWithRestResponseAsync(context, prefix, continuation, maxResults, xMsClientRequestId, timeout, xMsDate)
            .flatMapMaybe((FilesystemListResponse res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Create Filesystem
     * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support conditional HTTP requests.
     *
     * @param context The context to associate with this operation.
     * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
     * @param xMsProperties User-defined properties to be stored with the filesystem, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DataLakeStorageErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void create(Context context, @NonNull String filesystem, String xMsProperties, String xMsClientRequestId, Integer timeout, String xMsDate) {
        createAsync(context, filesystem, xMsProperties, xMsClientRequestId, timeout, xMsDate).blockingAwait();
    }

    /**
     * Create Filesystem
     * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support conditional HTTP requests.
     *
     * @param context The context to associate with this operation.
     * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
     * @param xMsProperties User-defined properties to be stored with the filesystem, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> createAsync(Context context, @NonNull String filesystem, String xMsProperties, String xMsClientRequestId, Integer timeout, String xMsDate, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(createAsync(context, filesystem, xMsProperties, xMsClientRequestId, timeout, xMsDate), serviceCallback);
    }

    /**
     * Create Filesystem
     * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support conditional HTTP requests.
     *
     * @param context The context to associate with this operation.
     * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
     * @param xMsProperties User-defined properties to be stored with the filesystem, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<FilesystemCreateResponse> createWithRestResponseAsync(Context context, @NonNull String filesystem, String xMsProperties, String xMsClientRequestId, Integer timeout, String xMsDate) {
        if (this.client.scheme() == null) {
            throw new IllegalArgumentException("Parameter this.client.scheme() is required and cannot be null.");
        }
        if (this.client.accountName() == null) {
            throw new IllegalArgumentException("Parameter this.client.accountName() is required and cannot be null.");
        }
        if (this.client.dnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter this.client.dnsSuffix() is required and cannot be null.");
        }
        if (filesystem == null) {
            throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
        }
        final String resource = "filesystem";
        return service.create(context, this.client.scheme(), this.client.accountName(), this.client.dnsSuffix(), filesystem, xMsProperties, resource, xMsClientRequestId, timeout, xMsDate, this.client.xMsVersion());
    }

    /**
     * Create Filesystem
     * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support conditional HTTP requests.
     *
     * @param context The context to associate with this operation.
     * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
     * @param xMsProperties User-defined properties to be stored with the filesystem, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable createAsync(Context context, @NonNull String filesystem, String xMsProperties, String xMsClientRequestId, Integer timeout, String xMsDate) {
        return createWithRestResponseAsync(context, filesystem, xMsProperties, xMsClientRequestId, timeout, xMsDate)
            .toCompletable();
    }

    /**
     * Set Filesystem Properties
     * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param context The context to associate with this operation.
     * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
     * @param xMsProperties Optional. User-defined properties to be stored with the filesystem, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set.  If the filesystem exists, any properties not included in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties, first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for all properties.
     * @param ifModifiedSince Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since the specified date and time.
     * @param ifUnmodifiedSince Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified since the specified date and time.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DataLakeStorageErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void setProperties(Context context, @NonNull String filesystem, String xMsProperties, String ifModifiedSince, String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate) {
        setPropertiesAsync(context, filesystem, xMsProperties, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate).blockingAwait();
    }

    /**
     * Set Filesystem Properties
     * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param context The context to associate with this operation.
     * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
     * @param xMsProperties Optional. User-defined properties to be stored with the filesystem, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set.  If the filesystem exists, any properties not included in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties, first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for all properties.
     * @param ifModifiedSince Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since the specified date and time.
     * @param ifUnmodifiedSince Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified since the specified date and time.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> setPropertiesAsync(Context context, @NonNull String filesystem, String xMsProperties, String ifModifiedSince, String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(setPropertiesAsync(context, filesystem, xMsProperties, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate), serviceCallback);
    }

    /**
     * Set Filesystem Properties
     * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param context The context to associate with this operation.
     * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
     * @param xMsProperties Optional. User-defined properties to be stored with the filesystem, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set.  If the filesystem exists, any properties not included in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties, first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for all properties.
     * @param ifModifiedSince Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since the specified date and time.
     * @param ifUnmodifiedSince Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified since the specified date and time.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<FilesystemSetPropertiesResponse> setPropertiesWithRestResponseAsync(Context context, @NonNull String filesystem, String xMsProperties, String ifModifiedSince, String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate) {
        if (this.client.scheme() == null) {
            throw new IllegalArgumentException("Parameter this.client.scheme() is required and cannot be null.");
        }
        if (this.client.accountName() == null) {
            throw new IllegalArgumentException("Parameter this.client.accountName() is required and cannot be null.");
        }
        if (this.client.dnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter this.client.dnsSuffix() is required and cannot be null.");
        }
        if (filesystem == null) {
            throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
        }
        final String resource = "filesystem";
        return service.setProperties(context, this.client.scheme(), this.client.accountName(), this.client.dnsSuffix(), filesystem, xMsProperties, ifModifiedSince, ifUnmodifiedSince, resource, xMsClientRequestId, timeout, xMsDate, this.client.xMsVersion());
    }

    /**
     * Set Filesystem Properties
     * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param context The context to associate with this operation.
     * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
     * @param xMsProperties Optional. User-defined properties to be stored with the filesystem, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set.  If the filesystem exists, any properties not included in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties, first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for all properties.
     * @param ifModifiedSince Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since the specified date and time.
     * @param ifUnmodifiedSince Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified since the specified date and time.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable setPropertiesAsync(Context context, @NonNull String filesystem, String xMsProperties, String ifModifiedSince, String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate) {
        return setPropertiesWithRestResponseAsync(context, filesystem, xMsProperties, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate)
            .toCompletable();
    }

    /**
     * Get Filesystem Properties.
     * All system and user-defined filesystem properties are specified in the response headers.
     *
     * @param context The context to associate with this operation.
     * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DataLakeStorageErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void getProperties(Context context, @NonNull String filesystem, String xMsClientRequestId, Integer timeout, String xMsDate) {
        getPropertiesAsync(context, filesystem, xMsClientRequestId, timeout, xMsDate).blockingAwait();
    }

    /**
     * Get Filesystem Properties.
     * All system and user-defined filesystem properties are specified in the response headers.
     *
     * @param context The context to associate with this operation.
     * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> getPropertiesAsync(Context context, @NonNull String filesystem, String xMsClientRequestId, Integer timeout, String xMsDate, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(getPropertiesAsync(context, filesystem, xMsClientRequestId, timeout, xMsDate), serviceCallback);
    }

    /**
     * Get Filesystem Properties.
     * All system and user-defined filesystem properties are specified in the response headers.
     *
     * @param context The context to associate with this operation.
     * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<FilesystemGetPropertiesResponse> getPropertiesWithRestResponseAsync(Context context, @NonNull String filesystem, String xMsClientRequestId, Integer timeout, String xMsDate) {
        if (this.client.scheme() == null) {
            throw new IllegalArgumentException("Parameter this.client.scheme() is required and cannot be null.");
        }
        if (this.client.accountName() == null) {
            throw new IllegalArgumentException("Parameter this.client.accountName() is required and cannot be null.");
        }
        if (this.client.dnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter this.client.dnsSuffix() is required and cannot be null.");
        }
        if (filesystem == null) {
            throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
        }
        final String resource = "filesystem";
        return service.getProperties(context, this.client.scheme(), this.client.accountName(), this.client.dnsSuffix(), filesystem, resource, xMsClientRequestId, timeout, xMsDate, this.client.xMsVersion());
    }

    /**
     * Get Filesystem Properties.
     * All system and user-defined filesystem properties are specified in the response headers.
     *
     * @param context The context to associate with this operation.
     * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable getPropertiesAsync(Context context, @NonNull String filesystem, String xMsClientRequestId, Integer timeout, String xMsDate) {
        return getPropertiesWithRestResponseAsync(context, filesystem, xMsClientRequestId, timeout, xMsDate)
            .toCompletable();
    }

    /**
     * Delete Filesystem
     * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds. While the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the service returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any files or directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param context The context to associate with this operation.
     * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
     * @param ifModifiedSince Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since the specified date and time.
     * @param ifUnmodifiedSince Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified since the specified date and time.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DataLakeStorageErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void delete(Context context, @NonNull String filesystem, String ifModifiedSince, String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate) {
        deleteAsync(context, filesystem, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate).blockingAwait();
    }

    /**
     * Delete Filesystem
     * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds. While the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the service returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any files or directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param context The context to associate with this operation.
     * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
     * @param ifModifiedSince Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since the specified date and time.
     * @param ifUnmodifiedSince Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified since the specified date and time.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> deleteAsync(Context context, @NonNull String filesystem, String ifModifiedSince, String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(deleteAsync(context, filesystem, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate), serviceCallback);
    }

    /**
     * Delete Filesystem
     * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds. While the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the service returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any files or directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param context The context to associate with this operation.
     * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
     * @param ifModifiedSince Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since the specified date and time.
     * @param ifUnmodifiedSince Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified since the specified date and time.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<FilesystemDeleteResponse> deleteWithRestResponseAsync(Context context, @NonNull String filesystem, String ifModifiedSince, String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate) {
        if (this.client.scheme() == null) {
            throw new IllegalArgumentException("Parameter this.client.scheme() is required and cannot be null.");
        }
        if (this.client.accountName() == null) {
            throw new IllegalArgumentException("Parameter this.client.accountName() is required and cannot be null.");
        }
        if (this.client.dnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter this.client.dnsSuffix() is required and cannot be null.");
        }
        if (filesystem == null) {
            throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
        }
        final String resource = "filesystem";
        return service.delete(context, this.client.scheme(), this.client.accountName(), this.client.dnsSuffix(), filesystem, ifModifiedSince, ifUnmodifiedSince, resource, xMsClientRequestId, timeout, xMsDate, this.client.xMsVersion());
    }

    /**
     * Delete Filesystem
     * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds. While the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the service returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any files or directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param context The context to associate with this operation.
     * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
     * @param ifModifiedSince Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since the specified date and time.
     * @param ifUnmodifiedSince Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified since the specified date and time.
     * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
     * @param timeout An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout value elapses before the operation completes, the operation fails.
     * @param xMsDate Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable deleteAsync(Context context, @NonNull String filesystem, String ifModifiedSince, String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate) {
        return deleteWithRestResponseAsync(context, filesystem, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate)
            .toCompletable();
    }
}
